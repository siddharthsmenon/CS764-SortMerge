
==============
 INTRODUCTION 
==============

This is the code to study the performance of massively parallel sort-merge join algorithms
implemented in following paper:
Albutiu, Martina-Cezara, Alfons Kemper, and Thomas Neumann. "Massively parallel sort-merge joins
in main memory multi-core database systems." Proceedings of the VLDB Endowment 5.10 (2012): 1064-1075.

It was extended from the one used to study the performance of various main-memory hash join
algorithms for the following SIGMOD 2011 paper:

Spyros Blanas, Yinan Li, Jignesh M. Patel: Design and evaluation of main
memory hash join algorithms for multi-core CPUs. In SIGMOD Conference, 
p. 37-48, 2011.

=================
 GETTING STARTED
=================

1. Checkout linear-scan branch from https://github.com/siddharthsmenon/CS764-SortMerge 
to try actual implementation of mpsm and to try our priority queue based implementation
of mpsm checkout master.

2. Fix the thread affinitization for your particular machine/OS, by editing
affinitizer.cpp, lines 39-44. The program will throw an exception by
default if it is unset, because this is required for consistent readings
of the tick counter (via rdtsc). Incase you want to see the join output on
the console, uncomment a commented block in main.cpp's compute function.
 

3. Generate a uniform dataset: 

$ cd datagen/
$ ./generate.sh
$ cd ..

After a few minutes, the datagen/ directory will contain two files: 
(a) the build side, "016M_build.tbl", a file with 1M tuples
(b) the probe side, "256M_probe.tbl", a file with 16M tuples


4. Compile:

$ make


5. Make sure libconfig++.so is in your path by doing:

$ export LD_LIBRARY_PATH=$PWD/dist/lib/:$LD_LIBRARY_PATH


6. Run with a sample configuration file. Let's pick the non-partitioning
algorithm:

$ ./multijoin conf/config.conf

The data that was generated in step 2 will first be loaded in memory (takes a
while depending on your I/O speed), then the algorithm will run (takes
seconds), and will output the something like this:

RUNTIME TOTAL, BUILD+PART, PART (cycles): 
16160005234 326706098   129240

The reported results are cumulative across phases, so you should not add the
three numbers together. In the example above, this means that the operation was
completed in 16,160,005,234 cycles, of which 326,706,098 cycles was sorting S, 
and 129,240 cycles was partitioning the input.

